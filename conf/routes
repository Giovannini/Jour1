# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                        controllers.Application.index

GET           /init                                                    controllers.WorldInitialisation.initialization

GET           /instances                                               controllers.WorldInitialisation.getWorld
GET           /instances/:initInstanceId/:actionType/:conceptId        controllers.RestCall.getPossibleDestinationOfAction(initInstanceId: Long, actionType: Long, conceptId: Long)

#Instances manipulation
GET           /instances/edit/:instanceId                              controllers.RestCall.editInstance(instanceId: Int)
GET           /instances/create/:conceptId                             controllers.RestCall.createInstance(conceptId: Int)

GET           /instances/:instanceId                                   controllers.RestCall.getInstanceById(instanceId: Int)
DELETE        /instances/:instanceId                                   controllers.ontology.InstanceManager.delete(instanceId: Int)
POST          /instances/update                                        controllers.ontology.InstanceManager.update
POST          /instances/create                                        controllers.ontology.InstanceManager.create


#Graph manipulation
GET           /graph                                                   controllers.graph.GraphVisualisation.index
GET           /graph/properties/:propertyId                            controllers.graph.GraphVisualisation.getProperty(propertyId: Int)
GET           /graph/actions                                           controllers.graph.ActionController.getActions

# Concept CRUD
GET           /concepts                                                controllers.RestCall.getAllConcepts
GET           /concepts/simple                                         controllers.RestCall.getAllSimplifiedConcepts
GET           /concepts/:conceptId                                     controllers.RestCall.getConceptById(conceptId: Long)

POST          /concepts/:label                                         controllers.graph.ConceptController.createConcept(label: String)
DELETE        /concepts/:label                                         controllers.graph.ConceptController.deleteConcept(label: String)
PUT           /concepts/:label                                         controllers.graph.ConceptController.updateConcept(label: String)
GET           /concepts/:label/actions                                 controllers.graph.ConceptController.getActions(label: String)
GET           /concepts/:label/:deepness                               controllers.graph.ConceptController.readConcept(label: String, deepness: Int)

# Relation CRUD
POST          /graph/relations/:label                                  controllers.graph.RelationController.createRelation(label: String)
GET           /graph/relations/:label                                  controllers.graph.RelationController.getRelation(label: String)
PUT           /graph/relations/:label                                  controllers.graph.RelationController.updateRelation(label: String)
DELETE        /graph/relations/:label                                  controllers.graph.RelationController.deleteRelation(label: String)

# Preconditions CRUD
GET           /preconditions                                           controllers.rules.PreconditionController.getPreconditions
POST          /preconditions/:label                                    controllers.rules.PreconditionController.createPrecondition(label: String)
GET           /preconditions/:label                                    controllers.rules.PreconditionController.getPrecondition(label: String)
PUT           /preconditions/:label                                    controllers.rules.PreconditionController.updatePrecondition(label: String)
DELETE        /preconditions/:label                                    controllers.rules.PreconditionController.deletePrecondition(label: String)

# Properties CRUD
GET           /properties                                              controllers.rules.PropertyController.getProperties
POST          /properties/:label                                       controllers.rules.PropertyController.createProperty(label: String)
GET           /properties/:label                                       controllers.rules.PropertyController.getProperty(label: String)
PUT           /properties/:label                                       controllers.rules.PropertyController.updateProperty(label: String)
DELETE        /properties/:label                                       controllers.rules.PropertyController.deleteProperty(label: String)

# Relations visualisation
GET           /relations                                               controllers.rules.RelationController.index
GET           /relations/:label                                        controllers.rules.RelationController.readAction(label: String)
POST          /relations/:label                                        controllers.rules.RelationController.createRelation(label: String)
PUT           /relations/:label                                        controllers.rules.RelationController.updateRelation(label: String)
DELETE        /relations/:label                                        controllers.rules.RelationController.deleteRelation(label: String)
#GET           /relations                                               controllers.rules.RelationVisualisation.index
#GET           /relations/create                                        controllers.rules.RelationVisualisation.createForm
#POST          /relations/create                                        controllers.rules.RelationVisualisation.createSubmit
#GET           /relations/update/:id                                    controllers.rules.RelationVisualisation.updateForm(id: Long)
#POST          /relations/update/:id                                    controllers.rules.RelationVisualisation.updateSubmit(id: Long)
#GET           /relations/delete/:id                                    controllers.rules.RelationVisualisation.delete(id: Long)

# Action CRUD
GET           /actions                                                 controllers.graph.ActionController.getActions
GET           /actions/:label                                          controllers.graph.ActionController.readAction(label: String)
POST          /actions/:label                                          controllers.graph.ActionController.createAction(label: String)
PUT           /actions/:label                                          controllers.graph.ActionController.updateAction(label: String)
DELETE        /actions/:label                                          controllers.graph.ActionController.deleteAction(label: String)

# Rules visualisation
# TODO :  delete when the action CRUD is done
#GET           /rules                                                   controllers.rules.RulesVisualisation.index
#GET           /rules/delete/:id                                        controllers.rules.RulesVisualisation.delete(id: Long)
#GET           /rules/load/:id                                          controllers.rules.RulesVisualisation.load(id: Long)
#GET           /rules/save                                              controllers.rules.RulesVisualisation.form
#POST          /rules/save                                              controllers.rules.RulesVisualisation.submit

# Map routes
GET           /map                                                     controllers.MapController.show
POST          /map/action                                              controllers.RestCall.executeAction
GET           /map/relations/:conceptId                                controllers.RestCall.getAllActionsOf(conceptId: Int)

GET           /next                                                    controllers.RestCall.next()

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                            controllers.Assets.at(path="/public", file)

# Thomas :  /map/...
#           /next
#           /init
#
# Aur√©lie : /map/...
#           /instances
#
# Julien : /instances
#          /concepts
#          /relations
#          /actions/...
#          /graph/relations/...
#          /rules
